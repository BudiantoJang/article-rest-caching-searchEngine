// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/port/search.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	redisearch "github.com/RediSearch/redisearch-go/redisearch"
	gomock "github.com/golang/mock/gomock"
)

// MockSearchRepository is a mock of SearchRepository interface.
type MockSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSearchRepositoryMockRecorder
}

// MockSearchRepositoryMockRecorder is the mock recorder for MockSearchRepository.
type MockSearchRepositoryMockRecorder struct {
	mock *MockSearchRepository
}

// NewMockSearchRepository creates a new mock instance.
func NewMockSearchRepository(ctrl *gomock.Controller) *MockSearchRepository {
	mock := &MockSearchRepository{ctrl: ctrl}
	mock.recorder = &MockSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchRepository) EXPECT() *MockSearchRepositoryMockRecorder {
	return m.recorder
}

// CreateSchema mocks base method.
func (m *MockSearchRepository) CreateSchema(schema *redisearch.Schema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema", schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockSearchRepositoryMockRecorder) CreateSchema(schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockSearchRepository)(nil).CreateSchema), schema)
}

// GetArticle mocks base method.
func (m *MockSearchRepository) GetArticle(ctx context.Context, in string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockSearchRepositoryMockRecorder) GetArticle(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockSearchRepository)(nil).GetArticle), ctx, in)
}

// Info mocks base method.
func (m *MockSearchRepository) Info() (*redisearch.IndexInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*redisearch.IndexInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockSearchRepositoryMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockSearchRepository)(nil).Info))
}

// UpdateIndex mocks base method.
func (m *MockSearchRepository) UpdateIndex(docs []redisearch.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndex", docs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIndex indicates an expected call of UpdateIndex.
func (mr *MockSearchRepositoryMockRecorder) UpdateIndex(docs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndex", reflect.TypeOf((*MockSearchRepository)(nil).UpdateIndex), docs)
}
