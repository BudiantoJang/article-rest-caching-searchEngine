// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/port/article.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "jang-article/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArticleUsecase is a mock of ArticleUsecase interface.
type MockArticleUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockArticleUsecaseMockRecorder
}

// MockArticleUsecaseMockRecorder is the mock recorder for MockArticleUsecase.
type MockArticleUsecaseMockRecorder struct {
	mock *MockArticleUsecase
}

// NewMockArticleUsecase creates a new mock instance.
func NewMockArticleUsecase(ctrl *gomock.Controller) *MockArticleUsecase {
	mock := &MockArticleUsecase{ctrl: ctrl}
	mock.recorder = &MockArticleUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleUsecase) EXPECT() *MockArticleUsecaseMockRecorder {
	return m.recorder
}

// GetArticle mocks base method.
func (m *MockArticleUsecase) GetArticle(ctx context.Context, author string) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", ctx, author)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockArticleUsecaseMockRecorder) GetArticle(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockArticleUsecase)(nil).GetArticle), ctx, author)
}

// SaveArticle mocks base method.
func (m *MockArticleUsecase) SaveArticle(ctx context.Context, article model.Article) (model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveArticle", ctx, article)
	ret0, _ := ret[0].(model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveArticle indicates an expected call of SaveArticle.
func (mr *MockArticleUsecaseMockRecorder) SaveArticle(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveArticle", reflect.TypeOf((*MockArticleUsecase)(nil).SaveArticle), ctx, article)
}
